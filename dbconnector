"""Quick and dirty function to preprocess the data,
create the different encoders and create and save a prediction model"""

import pickle

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MultiLabelBinarizer, StandardScaler
from sklearn.cluster import KMeans

csvfile = 'merged_Table.csv'

def spliter(element):
    return element.split(",")

def preprocess(filename):
    df2 = pd.read_csv(filename)

    df = df2[:4000]

    del df['dataservices_datastream_raw_consumer_id']
    # Transform string list into list of string
    #df['affinities'] = pd.Series(df['dataservices_statsocial_raw_affinities'].apply(spliter), index=df.index)
    df = df.assign(affinities=pd.Series(df['dataservices_statsocial_raw_affinities'].apply(spliter)))

    # delete old list of affinities
    del df["dataservices_statsocial_raw_affinities"]

    #deleting the id column added during join
    del df["dataservices_statsocial_raw_consumer_id"]


    mlb = MultiLabelBinarizer()
    X = mlb.fit_transform(df["affinities"])
    df = df.join(pd.DataFrame(X, columns=mlb.classes_))

    del df["affinities"]

    #fill nan values
    df.replace([np.inf, -np.inf], np.nan)
    df = df.fillna(0)
    return df,mlb



data,mlb = preprocess(csvfile)



#Transform string list into list of string
#data['affinities'] = pd.Series(data['dataservices_statsocial_raw_affinities'].apply(spliter), index=data.index)

#new column
#print(data['affinities'])

#delete old column from dataframe



data_array = data.values
#print(data_array[2:3])

"""Processing of all the string columns (categorical values)"""
#string to integers: label encoder
#columns to process: [3,4,5,6,7,8,9,11]:
# create a labelEncoder for each column

#column 3
le3 = LabelEncoder()
new_column3 = le3.fit_transform(data_array[:, 3].astype(str))
# replace old column with integers
data_array[:, 3] = new_column3

#column 4
le4 = LabelEncoder()
new_column4 = le4.fit_transform(data_array[:, 4].astype(str))
# replace old column with integers
data_array[:, 4] = new_column4

print("DEBUG IMPORTANT")
print(data_array[:,5])

#column 5
le5 = LabelEncoder()
new_column5 = le5.fit_transform(data_array[:, 5].astype(str))
# replace old column with integers
data_array[:, 5] = new_column5

#column 6
le6 = LabelEncoder()
new_column6 = le6.fit_transform(data_array[:, 6].astype(str))
# replace old column with integers
data_array[:, 6] = new_column6

#column 7
le7 = LabelEncoder()
new_column7= le7.fit_transform(data_array[:, 7].astype(str))
# replace old column with integers
data_array[:, 7] = new_column7

#column 8
le8 = LabelEncoder()
new_column8= le8.fit_transform(data_array[:, 8].astype(str))
# replace old column with integers
data_array[:, 8] = new_column8

#column 9
le9 = LabelEncoder()
new_column9= le9.fit_transform(data_array[:, 9].astype(str))
# replace old column with integers
data_array[:, 9] = new_column9

#column 11
le11 = LabelEncoder()
new_column11= le11.fit_transform(data_array[:, 11].astype(str))
# replace old column with integers
data_array[:, 11] = new_column11



data_array = data_array.astype(np.float64)
print(data_array[1,:15])

enc = OneHotEncoder('auto', [3,4,5,6,7,8,9,11], sparse=False)
enc = enc.fit(data_array) ####TODO lol we were setting this into data_array variable
data_array = enc.transform(data_array)


scaler = StandardScaler()
scaledData = scaler.fit_transform(data_array)
kmeans = KMeans(n_clusters=6)
model = kmeans.fit(scaledData)


pickle.dump({'model': model, 'data': scaledData,'mlb': mlb , 'le3': le3, 'le4': le4, 'le5': le5, 'le6': le6, 'le7': le7, 'le8': le8, 'le9': le9, 'le11': le11,'encoder': enc, 'scaler': scaler}, open("yeah_model.pickle", 'wb'))

final = pd.DataFrame(data=data_array[1:,1:],    # values
                index=data_array[1:,0],
                columns=data_array[0,1:])
print(data_array[0,:15])
final.to_csv('yeah.csv')


"""I have used this regex to clean lines with only 1 affinity"""

